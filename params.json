{"name":"Ant colony","tagline":"Ant colony optimization demo.","body":"##Projekt předmětu SFC\r\n\t\r\n\tAutor: Birger Mark, Bc. (xbirge00)\r\n\tVarianta: 94, Demonstrace činnosti ACO, Java aplikace\r\n\t\r\nObsah balíku:\r\n\r\n\t./\r\n\t├── aco.jar\t\t\t\t\t\t\tspustitelný .jar soubor\r\n\t├── report.pdf\t\t\t\t\t\ttechnická zprava\r\n\t├── report_with_images.pdf\t\t\ttechnická zprava z obrazky\r\n\t└── src\r\n\t    ├── Main.java\t\t\t\t\t\thlavni třida, inicializuje okno\r\n\t    ├── MainViewController.java\t\tACO, události uživatelského rozhraní\r\n\t    ├── Makefile\r\n\t    ├── layout.fxml\t\t\t\t\tpopis uživatelského rozhraní\r\n\t    └── META-INF\r\n\t  \t  └── MANIFEST.MF\r\n\t\r\nŘešeným problémem je **úloha obchodního cestujícího**. Na vstupu máme úplný graf. Na výstupu musíme vrátit nejkratší cestu, procházející vsemi uzly.  \r\n\r\nPro řešeni problému obchodního cestujícího využil jsem algoritmy **ACO (Ant Colony Optimization)**. Implementoval jsem základní algoritmus *ant cycle*, a všechny ho modifikace, probraný v rámci přednášek: *ant density*, *ant quantity*, *elitist strategy*, *max-min ant system*, *rank-based ant system*, *ant colony system*. Ovšem, da se řešit problém obchodního cestujícího pomoci ACO jen přibližně, ale kladem jsou prakticky použitelný casy. \r\n\r\n\r\n##Implementace\r\n\r\nProgramovací jazyk projektu je Java, **verze 8**.\r\n\r\nRozhodl jsem implementovat grafické uživatelské rozhraní, abych znázornit zadaní vstupního grafu a zobrazeni nalezené cesty. Pro implementace grafického uživatelského rozhraní byla zvolena knihovna JavaFX 8. Výrobcem knihovny JavaFX je Orcale, proto od verze Java 8, JavaFX je součásti distribuce JRE/JDK.\r\n\r\nJako vývojové prostředí využíval jsem *JetBrains IDEA*, pro návrh uživatelského rozhraní jsem využil *JavaFX SceneBuilder*, který umožňuje interaktivně rozmístit prvky uživatelského rozhraní a exportovat .fxml soubor, který se da využít už uvnitř aplikace.\r\n\r\nBěhem implementace došlo ke drobným změnám ant cycle algoritmu:\r\n\r\n\r\n- cely algoritmus je rozdělen do třech části, abych vyvolávat každou novou iterace pomoci události od grafického uživatelského rozhraní\r\n- modifikovaný metody jsou implementovaný pomoci smyček v základním ant-cycle algoritmu\r\n\r\n\r\n##Překlad\r\n\r\n\tcd ./src\r\n\tmake\r\n\tmake run\r\n\tmake clean\r\n\t\r\nPřeklad vyžaduje nainstalovaný JDK8 (`javac`, `jar` a `java`). Manuální překlad ověřen na systémech: Ubuntu 14.04, MacOSX 10.10. Spustitelný .jar soubor ověřen navic na systemech: Windows 7, Windows 10.\r\n\t\r\n##Návod na použity\r\n\r\nTakhle vypadá uživatelské rozhraní vytvořeného programu:\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 17.00.57.png =500x)\r\n\r\nUprostřed okna umístěno plátno, které má bílé pozadí. Pomoci **levého tlačítka** myšy uživatel může přidávat uzly (modré body v režimu úpravy grafu). Pomoci **pravého tlačítka** odstraňuje se nejbližší uzel. Pomoci **levého tlačítka** mysy a současné stisknuté klávesy `Ctrl` posune se nejbližší uzel na aktuální pozici.\r\n\r\nAbych zpracovávat graf, je potřeba přidat alespoň dva body. Pote uživatel může stisknout tlačítko `Start algorithm` v dolním pravém uhlu. Pak program zobrazí vysledek.\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 16.55.16.png =400x)\r\n\r\nNa platně se zobrazí cesta oranžovou barvou. Kazdy uzel označí se růžovou barvou různé intenzity. Intenzita růžové barvy označuje nejlepší cestu mravence (od světlo-růžové až k červené). Tohle potřeba, abych zvýraznit nalezenou cestu v případě velkého (100+) poctu uzlu. \r\n\r\nPo spuštěni algoritmu v levé dolní části okna obnoví se 3 parametry:\r\n\r\n- čas, který trval vypočet *(Time)*\r\n- délka nalezené cesty *(Distance)*\r\n- rozdíl mezi, předchozí délkou nalezené cesty *(Distance delta)*\r\n\r\nPoslední parametr je užitečný při porovnaní různých konfigurace algoritmu. \r\n\r\nUživatel může zvolit potřebnou modifikace algoritmu v přepínače ACO method. Dostupné metody jsou: *ant-cycle, ant-density, ant-quantity, elitist-strategy, max-min-as, rank-based-as, acs*.\r\n\r\nAbych vrátit se do režimu opravy grafu je potřeba stisknout tlačítko `Edit` v pravém horním uhlu. Když uživatel se nachází v režimu editace grafu, může smazat všechny uzlu pomoci tlačítka `Wipe`. V dolní části okna umístěn přepínač `Preload map`. Uživatel může zvolit jednu z dostupných map:\r\n\r\n- kružnice *(circle)*\r\n- náhodné umístěni 20ti uzlu *(random20)*\r\n- náhodné umístěni 100 uzlu *(random100)*\r\n- úsměv *(smile)*\r\n- rozmístěni velkých mest CR *(czech)*\r\n\r\nTlačítko `Load` smaže aktuální graf a nahradí ho přednastaveným způsobem. Velmi užitečným způsobem naplňovaní grafu je náhodné umístěni uzlu.\r\n\r\nV levé části okna jsou umístěny různý \"slidery\", který umožňuj nastavit parametry algoritmu. Po navedeni myši na každý parametr zobrazí se nápověda s významem tohoto parametru. Nejdůležitějšími parametry jsou **m** (počet mravenců) a **Cmax** (počet iteraci). Tyhle hodnoty mají nejvyšší vliv na kvalitu výsledné cesty. Pod čarou umístěny parametry pro rozšířené metody (*max-min*, *rank-based* a *ACS*). *Alpha* a *beta* pro experimentální účely mohou nabývat hodnot mene než jenda, což má zajímavý záporný vliv na výsledek. Vedle hodnot *min* a *max* jsou uveden symbol *, tyhle hodnoty opravdu 100x menší, než napsáno. Interval pro *min* a *max* parametry byl zjištěn experimentálně.\r\n\r\nUživatel může nastavit hodnoty na stejné jako po spuštěni programu pomoci tlačítka `Set defaults`. Označeni (Checkbox) `Start on options update` je užitečné pro porovnaní různých vstupních parametru. V tomto režimu, po uvolněni \"slideru\", algoritmus spustí se automaticky. \r\n\r\nTaky důležité i označeni (checkbox) `Step-by-step` nahoře. Po spusteni algoritmu v tomto režimu, program umožňuje podívat na cesty mravenců a intenzitu feromonových stop na každé iterace. Posun do další iterace provádí se pomoci tlačítka `Next`. Přepínač (ants/pheromone) přepíná zobrazeni cest mravenců a feromonových sto:.\r\n\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 16.56.13.png =400x)\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 16.56.23.png =400x)\r\n\r\nJednotlivé barvy odpovídají jednotlivým mravencům. V případě zobrazovaní feromonových stop, tmavší černa barva označuje vetší počet feromonu.\r\n\r\n## Vizualizace\r\n\r\nV případě zobrazeni cest mravenců, narazil jsem na problém zobrazeni velkého poctu dat na malém platně. Mel jsem různý varianty zobrazovan:.\r\n\r\n![image](/Users/kusha/Desktop/Снимок экрана 2015-12-05 в 16.11.13.png =150x)\r\n![image](/Users/kusha/Desktop/Снимок экрана 2015-12-05 в 16.15.47.png =150x)\r\n![image](/Users/kusha/Desktop/Снимок экрана 2015-12-05 в 16.17.39.png =150x)\r\n![image](/Users/kusha/Desktop/Снимок экрана 2015-12-05 в 16.22.13.png =150x)\r\n![image](/Users/kusha/Desktop/Снимок экрана 2015-12-05 в 16.23.18.png =150x)\r\n\r\nNa konci jsem přisel k speciálnímu algoritmu, který obarvuje jednotlivé cesty a inteligentně posouvá cesty pro znázorněni.\r\n\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.20.45.png =400x)\r\n\r\n##Ověřovaní funkčnosti\r\n\r\nJsem ověřil správnost nalezených cest pomoci grafu, body kterého tvoří kružnice:\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.19.30.png =300x)\r\n\r\nVšichni metody nalezli tuto nejkratší cestu, feromonový stopy taky mají vetší hodnoty na okrajových hranách:\r\n\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.25.23.png =300x)\r\n##Výsledky\r\n\r\nNavrhnul jsem cestu, kolem které jsem umístil uzlu grafu. Dole umístěny intenzity feromonových stop pro různý metody na 11te iterace pro stejný graf. Vyhodnotil jsem metody podle \"**čistoty**\" feromonových stop a zbytečných **lokálních extrému**.\r\n\r\n#### Ant Cycle\r\nReferenční výsledek, střední \"čistota\" grafu.\r\n\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.48.09.png =300x)\r\n\r\n#### Ant-density\r\nVidíme, jak náhodné dlouhé cesty taky přidaný do feromonových stop (není děleni Lk).\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.47.55.png =300x)\r\n\r\n\r\n#### Ant-quantity\r\nDélka hrany ovlivňuje, a význačné posiluje velmi malý hrany. Ovsem, graf je čistější než u Ant Cycle.\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.47.40.png =300x)\r\n\r\n#### Elitist strategy\r\nVelmi cisty graf, ovsem vidíme lokální extrémy na rozdíl od Ant Colony System.\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.47.21.png =300x)\r\n\r\n#### Max-min Ant System\r\nMax-min nedokázal dobry výsledky a vyžaduje přesnou manuální konfiguraci.\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.37.13.png =300x)\r\n\r\n#### Rank-based Ant System\r\n10 lepších ze 20. Graf není cisty, vidíme neoptimální cesty z počátečních iteraci. Pravděpodobně tato metoda vyžaduje vetší počet iteraci.\r\n\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.37.30.png =300x)\r\n\r\n15 lepších ze 20. Výsledek je lepší při stejném poctu iteraci, ale už připomíná Ant Cycle.\r\n\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.46.24.png =300x)\r\n\r\n#### Ant colony system\r\n\r\n\"Cisty\" graf, neobsahuje lokální extrémy na rozdíl od Elitist strategy. Nejlepší metoda.\r\n\r\n![image](/Users/kusha/Desktop/resized/Снимок экрана 2015-12-06 в 18.37.50.png =300x)\r\n\r\n###Výsledná aplikace:\r\n\r\n- ověřena\r\n- znázorňuje klady a zápory různých metod ACO\r\n- může byt využita pro demonstrace/vyuku metod ACO\r\n- vizuálně demonstruje algoritmy na každé iteraci\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}